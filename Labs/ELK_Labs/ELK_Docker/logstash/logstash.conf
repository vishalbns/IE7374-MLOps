input {
  # Input for training logs
  file {
    path => "/logstash_dir/training.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "training"  # Adding a type to differentiate between inputs
  }
  
  # Input for drift detection logs
  file {
    path => "/logstash_dir/drift_detection.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "drift"  # Adding a different type for drift logs
  }
}

filter {
  # Common grok pattern for timestamp, loglevel, and message
  grok {
    match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} - %{LOGLEVEL:loglevel} - %{GREEDYDATA:message}" }
  }

  # Common patterns for F1 Score, False Positive Rate, and False Negative Rate
  grok {
    match => { "message" => "F1 Score: %{NUMBER:f1_score}" }
    overwrite => [ "f1_score" ] 
  }

  grok {
    match => { "message" => "False Positive Rate: %{NUMBER:fpr}" }
    overwrite => [ "fpr" ]
  }

  grok {
    match => { "message" => "False Negative Rate: %{NUMBER:fnr}" }
    overwrite => [ "fnr" ]
  }

  # Specific pattern for data drift logs
  if [type] == "drift" {
    grok {
      match => { "message" => "Data drift detected in batch %{NUMBER:batch_count} - sample_index: %{NUMBER:sample_index}, drift_type: %{WORD:drift_type}" }
      add_field => { "drift" => "true" }
    }
  }

  # Rename fields to create columns
  mutate {
    rename => {
      "timestamp" => "log_timestamp"
      "loglevel" => "log_level"
      "message" => "log_message"
    }
  }
}

output {
  # Output to Elasticsearch index based on log type
  if [type] == "training" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "logstashtraining"
    }
    stdout {
      codec => rubydebug {
        metadata => false
      }
    }
  }
  
  if [type] == "drift" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "logstashdriftdetection"
    }
    stdout {
      codec => rubydebug {
        metadata => false
      }
    }
  }
}
